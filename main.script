// -----------------------------------------------------------------------------
// This file contains the definition of the custom GUI
//
// \file    main.py
// \author  MedVis group 4
// \date    01/2021
//
// -----------------------------------------------------------------------------


// The Interface part is mostly used to declare extra fields.
Interface {
  Parameters {
    /* Start of import data parameters */
    
    Field dependencyPass { // check if python libraries are installed
      type  = Bool
      value = False
    }
    
    Field dicomLoaded {
      type = Bool
      value = False
    }
    
    Field segmentationOption {
      type   = Enum
      value  = New
      values = New,Preprocessed
    }
    
    Field dataPath {
      type  = String
      value = ImportModule.fullPath
    }
    
    // SegmentationPath is the path to trachea segmentation folder (used in GUI). It also updates the lungPath module via Python
    Field SegmentationPath {
      type  = String
      value = SaveTrachea.sourceName
    }
    
    Field LungPath { // value depends on value in SegmentationPath
      type  = String
      value = SaveLungs.sourceName
    }
    
    Field TracheaPathFileName { // path to preprocessed trachea
      type  = String
      value = ProcessedTrachea.name
    }
    
    Field LungPathFileName { // path to preprocessed lungs
      type  = String
      value = ProcessedLungs.name
    }
    
    
    Field SamplingDICOM {
      type   = Enum
      value  = None
      values = Downsampling,None,Upsampling
    }
    Field xResample {
      type  = Int
      min   = 1
      value = 1
    } 
    Field yResample {
      type  = Int
      min   = 1
      value = 1
    }
    Field zResample {
      type  = Int
      min   = 1
      value = 1
    }
    /* End of import data parameters */
    
    /* Start of trachea parameters */
 //   Field CPRNumMarkers { type = Int }
    
    Field tracheaDiameter { 
      type  = Double 
      Value = PathToKeyFrame.pathLength 
    }
    Field timepointCurrentTrachea {
      type  = Int
      value = 0
      min   = 0
      max   = 9
    }
    
    Field timepointAutoStepTrachea {
      type  = Bool
      value = Counter.autoStep
    }
    
    Field timepointAutoStepIntervalTrachea {
      type  = Double
      value = Counter.autoStepInterval_s
    }
    
    Field timepointStepDirectionTrachea {
      type   = Enum
      value  = Up
      values = Up,Down
    }
    
    
    ////// START OF FIELDS FOR CPR CONTROL //////
    Field CPRNumMarkers { type = Int }
    Field CPRMarkerColor {
      type  = color
      value = "0 0 1"
    }
    Field CPRMarkerSort {
      type   = Enum
      value  = Z
      values = X,Y,Z,C,T,U,XYZCTU-Cell
    }
    Field CPRSortAscending { type = Bool persistent = True }
    Field CPRPathLength { type = Double }
    Field CPROutputKeys { type = Int }
    Field CRPSmoothingField { type = Int value = 8 }
    Field CRPResolutionField {
      type  = Float
      value = 0.1
      min   = 0.1 // can't be 0 or negative
      max   = 10
    }
    
    ////// END OF FIELDS FOR CPR CONTROL //////
    
    
    /* End of trachea parameters */
    
    Field validVolume {
      type  = Bool
      value = CalculateVolume.resultsValid
    }
    
    Field timepointVolumeCurrent {
      type  = Int
      value = CalculateVolume.userTimepointVolume
    }
    
    Field timepointVolumeMin {
      type  = Int
      value = CalculateVolume.minTimepointVolume
    }
    
    Field timepointVolumeMax {
      type  = Int
      value = CalculateVolume.maxTimepointVolume
    }
    
    
    
    
    // This is the current counter field in the MeVisLab network that is linked to modules that work with timepoints
    Field timepointCurrent {
      type  = Int
      value = 0
      min   = 0
      max   = 9
    }
    
    Field timepointMin {
      type  = Int
      value = CalculateVolume.minTimepoint
    }
    
    Field timepointMax {
      type  = Int
      value = CalculateVolume.maxTimepoint
    }
    
    Field timepointAutoStep {
      type  = Bool
      value = TimepointCounter.autoStep
    }
    
    Field timepointAutoStepInterval {
      type  = Double
      value = TimepointCounter.autoStepInterval_s
    }
    
    Field timepointStepDirection {
      type   = Enum
      value  = Up
      values = Up,Down
    }
  }
}

///////////////////////////////////////

// Commands section is used to declare and import Python scripts and assign functions.
Commands {

  // Indicate the source Python file
  source = $(LOCAL)/main.py
  
  // Set Fields used in control panels on opening of GUI
  initCommand = initialize
  
  FieldListener  {
    command = "py: dicomLoaded()"
    listenField = ImportModule.numVolumes
  }

  FieldListener {
    command     = "py: updateField('dataPath', 'ImportModule.fullPath')"
    listenField = ImportModule.fullPath
  }
  
  FieldListener {
    command     = "py: updateField('SegmentationPath', 'SaveTrachea.sourceName')"
    listenField = SaveTrachea.sourceName
  }
  
  FieldListener {
    command     = "py: updateField('SegmentationPath', 'SaveLungs.sourceName')"
    listenField = SaveLungs.sourceName
  }
  
  FieldListener {
    command     = "py: updateField('TracheaPathFileName', 'ProcessedTrachea.name')"
    listenField = ProcessedTrachea.name
  }
  
  FieldListener {
    command     = "py: updateField('LungPathFileName', 'ProcessedLungs.name')"
    listenField = ProcessedLungs.name
  }
  
  FieldListener {
    command     = toggleSampling
    listenField = SamplingDICOM
  }
  
  FieldListener {
    command     = toggleImportSwitches
    listenField = segmentationOption
  }
  
  FieldListener {
    command     = "py: updateResample('x')"
    listenField = xResample
  }
  FieldListener {
    command     = "py: updateResample('y')"
    listenField = yResample
  }
  FieldListener {
    command     = "py: updateResample('z')"
    listenField = zResample
  }
  
  
  // Update CPRNumMarkers Field
  FieldListener {
    command     = "py: updateField('CPRNumMarkers', 'SoView2DMarkerEditor.numItems')"
    listenField = SoView2DMarkerEditor.numItems
  }
  
  FieldListener {
    command     = "py: calculateDiameter()"
    listenField = PathToKeyFrame.pathLength
  }
  
  
  // Update CPRMarkerColor Field
  FieldListener {
    command     = "py: updateField('CPRMarkerColor', 'SoView2DMarkerEditor.color')"
    listenField = SoView2DMarkerEditor.color
  }
  
  // Bi-Directional Update CPRMarkerColor Field
  FieldListener {
    command     = "py: updateField('SoView2DMarkerEditor.color', 'CPRMarkerColor')"
    listenField = CPRMarkerColor
  }
  
  
  // update CPRMarkerSort Field
  FieldListener {
    command     = "py: updateField('CPRMarkerSort', 'XMarkerListSort.sortMode')"
    listenField = XMarkerListSort.sortMode
  }
  
  // Bi-Direcetional Update CPRMarkerSort Field
  FieldListener {
    command     = "py: updateField('XMarkerListSort.sortMode', 'CPRMarkerSort')"
    listenField = CPRMarkerSort
  }
  
  
  // Update CPRSortAscending Field
  FieldListener {
    command     = "py: updateField('CPRSortAscending', 'XMarkerListSort.ascending')"
    listenField = XMarkerListSort.ascending
  }
  
  // Bi-Directional Update CPRSortAscending Field
  FieldListener {
    command     = "py: updateField('XMarkerListSort.ascending', 'CPRSortAscending')"
    listenField = CPRSortAscending
  }
  
  // Update CPRPathLength Field
  FieldListener {
    command     = "py: updateField('CPRPathLength', 'PathToKeyFrame.pathLength')"
    listenField = PathToKeyFrame.pathLength
  }
  
  // Update CPROutputKeys Field
  FieldListener {
    command     = "py: updateField('CPROutputKeys', 'PathToKeyFrame.numOutputKeys')"
    listenField = PathToKeyFrame.numOutputKeys
  }
  
  // Update CPR CRPSmoothingField Field
  FieldListener {
    command     = "py: updateField('CRPSmoothingField', 'PathToKeyFrame.numSmoothes')"
    listenField = PathToKeyFrame.numSmoothes
  }
  
  // bi-directional update CRPSmoothingField
  FieldListener {
    command     = "py: updateField('PathToKeyFrame.numSmoothes', 'CRPSmoothingField')"
    listenField = CRPSmoothingField
  }
  
  // Update CRPResolutionField Field
  FieldListener {
    command     = "py: updateField('CRPResolutionField', 'PathToKeyFrame.outputResolution')"
    listenField = PathToKeyFrame.outputResolution
  }
  
  // bi-directional update CRPResolutionField
  FieldListener {
    command     = "py: updateField('PathToKeyFrame.outputResolution', 'CRPResolutionField')"
    listenField = CRPResolutionField
  }
  
  
  
  
  
  
  
  FieldListener  {
    command     = "py: updateField('validVolume', 'CalculateVolume.resultsValid')"
    listenField = CalculateVolume.resultsValid
  }
  FieldListener  {
    command     = "py: updateField('timepointVolumeCurrent', 'CalculateVolume.userTimepointVolume')"
    listenField = CalculateVolume.userTimepointVolume
  }
  FieldListener  {
    command     = "py: updateField('timepointVolumeMin', 'CalculateVolume.minTimepointVolume')"
    listenField = CalculateVolume.minTimepointVolume
  }
  FieldListener  {
    command     = "py: updateField('timepointVolumeMax', 'CalculateVolume.maxTimepointVolume')"
    listenField = CalculateVolume.maxTimepointVolume
  }
  
  
  
  
  FieldListener  {
    command     = "py: updateField('timepointCurrent', 'TimepointCounter.currentValue')"
    listenField = TimepointCounter.currentValue
  }
  FieldListener  {
    command     = "py: updateField('timepointMin', 'CalculateVolume.minTimepoint')"
    listenField = CalculateVolume.minTimepoint
  }
  FieldListener  {
    command     = "py: updateField('timepointMax', 'CalculateVolume.maxTimepoint')"
    listenField = CalculateVolume.maxTimepoint
  }
  FieldListener  {
    command     = "py: updateField('timepointAutoStep', 'TimepointCounter.autoStep')"
    listenField = TimepointCounter.autoStep
  }
  FieldListener  {
    command     = "py: updateField('TimepointCounter.autoStep', 'timepointAutoStep')"
    listenField = timepointAutoStep
  }
  FieldListener  {
    command     = "py: updateField('timepointAutoStepInterval', 'TimepointCounter.autoStepInterval_s')"
    listenField = TimepointCounter.autoStepInterval_s
  }
  FieldListener  {
    command     = "py: updateField('TimepointCounter.autoStepInterval_s', 'timepointAutoStepInterval')"
    listenField = timepointAutoStepInterval
  }
  FieldListener  {
    command     = "py: updateField('timepointStepDirection', 'TimepointCounter.stepDirection')"
    listenField = TimepointCounter.stepDirection
  }
  FieldListener  {
    command     = "py: updateField('TimepointCounter.stepDirection', 'timepointStepDirection')"
    listenField = timepointStepDirection
  }
  // Timepoint update Trachea
  FieldListener {
    command     = "py: updateField('Counter.currentValue','timepointCurrentTrachea')"
    listenField = timepointCurrentTrachea
  }
  FieldListener {
    command     = "py: updateField('timepointCurrentTrachea','Curved.timePoint')"
    listenField = Curved.timePoint
  }
  FieldListener  {
    command     = "py: updateField('timepointAutoStepTrachea', 'Counter.autoStep')"
    listenField = Counter.autoStep
  }
  FieldListener  {
    command     = "py: updateField('Counter.autoStep', 'timepointAutoStepTrachea')"
    listenField = timepointAutoStepTrachea
  }
  FieldListener  {
    command     = "py: updateField('timepointAutoStepIntervalTrachea', 'Counter.autoStepInterval_s')"
    listenField = Counter.autoStepInterval_s
  }
  FieldListener  {
    command     = "py: updateField('Counter.autoStepInterval_s', 'timepointAutoStepIntervalTrachea')"
    listenField = timepointAutoStepIntervalTrachea
  }
  FieldListener  {
    command     = "py: updateField('timepointStepDirectionTrachea', 'Counter.stepDirection')"
    listenField = Counter.stepDirection
  }
  FieldListener  {
    command     = "py: updateField('Counter.stepDirection', 'timepointStepDirectionTrachea')"
    listenField = timepointStepDirectionTrachea
  }
  
  
  
  
  
  
  
  
  // This FieldListener triggers the function `updateCounter` in `Assignment-2-3.py` when the currentValue field from TimepointCurrent changes.
  FieldListener {
    command     = updateSliderField
    listenField = TimepointCounter.currentValue
  }
  
  // With just the above, if you change the slider's position, the Counter module's value will not change.
  // If you want a bi-directional update, you need to add another FieldListener that updates the Counter's value using the updateCounter function.
  FieldListener {
    command     = updateCounter
    listenField = timepointCurrent
  }
  

}

///////////////////////////////////////

// Window definition! Here all the MDL code will go which dictates how UI elements look.
Window "MedVis Group4" {
  // A TabView lets us have multiple options or settings in a compact area
  TabView {
    TabViewItem "Import data" {
      Splitter {
        direction = vertical
        Splitter{
          direction = horizontal
          Box "Control Panel" {              
            expandX = MinimumExpanding
            expandY = MinimumExpanding
            alignY  = Top
            Label Instruction {
              title    = "Import DICOM data and segment trachea and lungs or import preprocessed images"
              textWrap = WordBreak
            }
              
            Panel {
              minimumHeight = 350
              minimumWidth  = 350
              style{colors{fg=white}}
              module = ImportModule
            }
                
            Box "Resampling Controls" {
              Horizontal { // it's easier to align a bundle of controls by wrapping them in an extra Horizontal
                Horizontal {
                  alignX = Left
                  Label {title = "resampling mode: " labelAlignGroup = segmentationlabel}
                  Field SamplingDICOM {title = "" alignGroupX = segmentationbutton}
                  
                  Label {
                    title     = "<p style=\"color:tomato\"> Downsampling may lead to incorrect segmentations</p>"
                    visibleOn = "* SamplingDICOM == /^(Downsampling)$/ *"
                    textWrap = WordBreak
                  }
                }
                Horizontal {
                  alignX         = Right
                  preferredWidth = 10
                  Label label { title = "Resampling Factor:" }
                  Label x {title = "x"}
                  NumberEdit xResample { step = 1 }
                  Label y {title = "y"}
                  NumberEdit yResample { step = 1 }
                  Label z {title = "z"}
                  NumberEdit zResample { step = 1 }
                }
              }
            }
              
            Box "Segmentation Controls" {
              minimumHeight = 120
              Horizontal {
                Horizontal {
                  alignX = Left
                  Label {title = "Segmentation mode: " labelAlignGroup = segmentationlabel }
                  Field segmentationOption {title = "" alignGroupX = segmentationbutton }
                }   
                
                Button  {
                  //   visibleOn = dependencyPass
                  title     = "Start Segmentation"
                  command   = "py: StartSegmentation(\"segmentation\")"
                  visibleOn = "* segmentationOption == /^(New)$/ && dependencyPass *"
                  //alignGroupX = segmentationbuttonsnew
                  alignX    = right
                } 
              }
              
              Box "Download Modules" {
                visibleOn = "* segmentationOption == /^(New)$/ && !dependencyPass *"
                Horizontal {
                  Label {title = "Missing libraries detected. Please install scikit-image and/or scipy to be able to create a segmentation"}
                  Button  {
                    title       = "Install libraries"
                    command     = "py: downloadDependencies()"
                    alignGroupX = segmentationbuttonsnew
                    alignX      = Right
                  }
                }
                Label {title = "<p style=\"color:tomato\"> Please restart MeVisLab after installing the libraries to load them. This message will disappear if installed succesfully.</p>"}
              }
              
              
              Horizontal {
                visibleOn = "* segmentationOption == /^(New)$/ && dependencyPass *"
                Label { title = "Output Folder: " labelAlignGroup = segmentationlabel }
                Field SegmentationPath { title = "" expandX = Yes }
                Button {
                  title       = "Browse..."
                  command     = "py: Browse(\"SaveTrachea.sourceName\")"
                  alignGroupX = segmentationbuttonsnew
                  alignX      = Right
                }
              }
              Horizontal {
                visibleOn = "* segmentationOption == /^(New)$/ && dependencyPass *"
                Button {
                  title       = "Store Results"
                  command     = "py: saveSegmentation()"
                  alignGroupX = segmentationbuttonsnew
                  alignX      = Right
                }
              }
                  
                
              Horizontal {
                visibleOn = "* segmentationOption == /^(Preprocessed)$/ *"
                Label {title = "Trachea segmentation: " labelAlignGroup = segmentationlabel}
                Field TracheaPathFileName { title = "" }
                Button {
                  title          = "Load File"
                  preferredWidth = 50
                  alignX         = Right
                  command        = "py: BrowseFile(\"ProcessedTrachea\")"
                }
              }
              Horizontal {
                visibleOn = "* segmentationOption == /^(Preprocessed)$/ *"
                Label {title = "Lungs segmentation: " labelAlignGroup = segmentationlabel}
                Field LungPathFileName { title = "" alignGroupX = segmentationPath}
                Button {
                  title          = "Load File"
                  preferredWidth = 50
                  alignX         = Right
                  command        = "py: BrowseFile(\"ProcessedLungs\")"
                }
              }    
            } // close segmentation control box
          } // close control panel box
        }
        // Start of 2nd row on import data tab
        Splitter {
          Box "DICOM Preview" {
            minimumHeight = 250
            minimumWidth  = 250
            expandX       = MinimumExpanding
            expandY       = MinimumExpanding
            Viewer DataPreview.self {visibleOn = dicomLoaded type = SoRenderArea }
            Label {visibleOn = !dicomLoaded title = "<p style=\"color:tomato\"> Please load a DICOM image to show this viewer</p>"
              textAlignment = Center textWrap = WordBreak }
          }
          
          Box "Trachea Segmentation Preview" {
            minimumHeight = 250
            minimumWidth  = 250
            expandX       = MinimumExpanding
            expandY       = MinimumExpanding
            Viewer trachea.self {
              visibleOn = validVolume
              name      = "Trachea"
            }
            Label {title = "<p style=\"color:tomato\"> Start a new segmentation or load preprocessed image to show this viewer</p>"
              visibleOn = !validVolume textAlignment = Center textWrap = WordBreak }
          } // close Trachea segmentation box
          
          Box "Lungs Segmentation Preview" {
            minimumHeight = 250
            minimumWidth  = 250
            expandX       = MinimumExpanding
            expandY       = MinimumExpanding
            
            Viewer lungs.self {
              visibleOn = validVolume
              name      = "Lungs"
            }
            Label {title = "<p style=\"color:tomato\"> Start a new segmentation or load preprocessed image to show this viewer</p>"
              visibleOn = !validVolume textAlignment = Center textWrap = WordBreak }
          } // close Trachea segmentation box
        } // close splitter (2nd row)
      } // close outer splitter
    } // Close TabView of Import
    
    
    ////////////////////////////// Diagnosis related to trachea //////////////////////////////
    TabViewItem "Trachea Diagnoses" {
      Splitter {
        direction = vertical
        Splitter {
          Box "Control Panel"{
            expandX = MinimumExpanding
            //expandY = MinimumExpanding
            alignY  = Top
            
            Box "Description" {
              Label {title = "Select a few markers in the Marker-Picker window to create a straightened CPR. Select 2 markers in the straightened CPR viewer to measure the diameter of the trachea. The viewer to the right shows the trachea at peak inspiration and peak expiration." textWrap = WordBreak}
            }
            
            Box "Marker Settings" {
              expandY = No
              Horizontal {
                Label LabelColorPicker { title = "Color: " }
                Field CPRMarkerColor { title = "" }
              }
              //Horizontal {
              //  Label LabelSortMode{ title = "Sort Mode: " labelAlignGroup = group1}
              //  Field CPRMarkerSort {title = ""}
              //  CheckBox CPRSortAscending{title = ""}
              //  Label { title = " Sort ascending" }       
              //}
              Horizontal {
                Label LabelNumberOfMarkers{ title = "Selected Markers: " }
                Field CPRNumMarkers {
                  title     = ""
                  edit      = No
                  editAlign = Right
                  

                }
                Button { title = "Clear Markers" command = "py: touchButton('SoView2DMarkerEditor.deleteAll')" }
              }                      
            }
            //Box "Path Settings" {
            //  Horizontal {                        
            //    Label LabelSmoothing { title = "Smoothing: " labelAlignGroup = group2 }
            //    NumberEdit CRPSmoothingField { step     = 1 }
            //  }
            //  Horizontal {
            //    Label LabelResolution { title = "Resolution: " labelAlignGroup = group2 }
            //    NumberEdit CRPResolutionField {
            //      step     = 0.1
            //      stepstep = 1 // Not visible on MacOS, but it's a second incrementer taking bigger steps
            //    }
            //    Label "mm" {}
            //  }
            //  Horizontal {
            //    Label { title = "Path Length: " labelAlignGroup = group2}
            //    Field CPRPathLength {
            //      title     = ""
            //      edit      = No
            //      editAlign = right
            //      expandX   = yes
            //    }
            //    Label "mm" {}
            //    Field CPROutputKeys {
            //      title     = ""
            //      edit      = No
            //      editAlign = right
            //    }
            //    Label "keys" {}
            //  }
            //} // close Box Path Settings
            
              Box "Timepoint Control CPR" {
                Horizontal {
                  Slider timepointCurrentTrachea {
                    pageStep  = 1  // Step-size when user clicks left or right
                    snap      = 1    // Snap to multiples of 1
                    direction = Horizontal
                  }
                  Label {titleField = timepointCurrentTrachea}
                }
                Horizontal {
                  CheckBox timepointAutoStepTrachea {title = "Auto-update every" expandX = 1 }
                  Field timepointAutoStepIntervalTrachea {title = "" step = 0.1 alignX = Right} 
                  Label {title = seconds}
                }
                Horizontal {              
                  Label {title = "Step Direction: " }
                  Field timepointStepDirectionTrachea {title = "" }
                }
              }
          }
          
          // Volume Difference between max inspiration and max expiration
          Box "Inspiration - Expiraration Volume" {
            preferredWidth  = 400
            preferredHeight = 400
            Label {title = "<p style=\"color:tomato\"> Please load segmented lungs and trachea to see this view</p>"
              visibleOn = !validVolume textAlignment = Center textWrap = WordBreak }
            
            // Output Trachea Inspiration volume + expiration volume            
            Viewer VolumeDiff.self {
              visibleOn       = validVolume
              name            = "Viewer3DMPR"    
              clone           = NO
              preferredWidth  = 400
              preferredHeight = 400    
            }
            Label {title = "Difference between inspiration and expiration is indicated by red" 
              visibleOn = validVolume textWrap = WordBreak textAlignment = Center}
          }
        } // splitter row 1
        Splitter {
          Box "Marker-Picker" {
            preferredWidth  = 350
            preferredHeight = 350
            expandX = MinimumExpanding
            expandY = MinimumExpanding
            
            Viewer View2D2.self {
              visibleOn = dicomLoaded
              name            = "ViewerMPR"    
              viewing         = No
              clone           = No
            }
            Label { title = "Scrollwheel Up/Down: Move Up/Down Through The Slices" visibleOn = dicomLoaded}
            Label { title = "Mouseclick On Empty Area: Add Marker" visibleOn = dicomLoaded}
            Label { title = "Mouseclick On Marker: Remove Marker" visibleOn = dicomLoaded}
            Label {visibleOn = !dicomLoaded title = "<p style=\"color:tomato\"> Please load a DICOM image to show this viewer</p>"
              textAlignment = Center textWrap = WordBreak }
          }
         
          Box "Straightened CPR" {
            preferredWidth  = 350
            preferredHeight = 350
            expandX = MinimumExpanding
            expandY = MinimumExpanding
            
            Label {title = "<p style=\"color:tomato\"> Please pick at least 2 markers to create a straightened CPR</p>"
              visibleOn = "* CPRNumMarkers == /^(0|1)$/ *" textAlignment = Center }
            
            Viewer Curved.self {
              visibleOn       = "* CPRNumMarkers != /^(0|1)$/ *"
              name            = "Viewer2DMPR"   
              viewing         = No
              Clone           = No
            }
            Label { title = "Scrollwheel Up/Down: Move Up/Down Through The Slices" visibleOn = "* CPRNumMarkers != /^(0|1)$/ *"}
            Label { title = "Mouseclick On Empty Area: Add Marker" visibleOn = "* CPRNumMarkers != /^(0|1)$/ *"}
            Label { title = "" } // spacer
            Horizontal {
              alignX = Left
              visibleOn       = "* CPRNumMarkers != /^(0|1)$/ *"
              Label { Title = "Calculated diameter: " labelAlignGroup = trachealabel }
              Label { titleField = tracheaDiameter  style {colors {fg = black bg = white}}} 
              Label { title = mm } 
            }
          }
        } // splitter row 2
      }
    }
    
    
    
    ////////////////////////////// Diagnoses related to lungs //////////////////////////////
    TabViewItem "Lung" {
      tabSelectedCommand = "py: ReloadModule('SubtractionImage')"
      Splitter {
        direction = vertical
        Splitter {
          Box "Control Panel" {
            alignY = Top

            Box " Lung Volume" {
              expandX = Minimum
              Horizontal {
                Label { title = "Min. Timepoint: " labelAlignGroup = lungVolumeTime}
                Label {titleField = timepointMin expandX = Yes}
                Label {title = "Volume:" labelAlignGroup = lungVolume }
                Label {titleField = timepointVolumeMin }
                Label {title = ml }
              }
              Horizontal {
                Label { title = "Max. Timepoint: " labelAlignGroup = lungVolumeTime}
                Label {titleField = timepointMax expandX = Yes}
                Label {title = "Volume:" labelAlignGroup = lungVolume }
                Label {titleField = timepointVolumeMax }
                Label {title = ml }
              }
              Horizontal {
                Label { title = "User Timepoint: " labelAlignGroup = lungVolumeTime}
                Label {titleField = timepointCurrent expandX = Yes }
                Label {title = "Volume:" labelAlignGroup = lungVolume }
                Label {titleField = timepointVolumeCurrent }
                Label {title = ml }
              }
            }
            
            Box "Timepoint Control" {
              expandX = Minimum
              Horizontal {
                Slider timepointCurrent {
                  pageStep  = 1  // Step-size when user clicks left or right
                  snap      = 1    // Snap to multiples of 1
                  direction = Horizontal
                }
                Label {titleField = timepointCurrent}
              }
              
              Horizontal {
                CheckBox timepointAutoStep {title = "Auto-update every" expandX = Yes}
                Field timepointAutoStepInterval {title = "" step = 0.1} 
                Label {title = seconds}
              }
              Horizontal {              
                Label {title = "Step Direction: "}
                Field timepointStepDirection {title = ""}
              }
            }
          }
          
          Panel {
            module        = CurveInspector
            minimumWidth = 400
            minimumHeight = 400
          }
        } // splitter row 1
        Splitter {
          Panel {module = substraction_images window = LutEditor}
          Viewer substraction_overlayed.self { type = SoCustomExaminerViewer}
        } // splitter row 2
      } // close vertical splitter
    } // close Lung tabview
  } // close tabviewer
} // close MyViewer window
