// -----------------------------------------------------------------------------
// This file contains the definition of the custom GUI
//
// \file    main.py
// \author  MedVis group 4
// \date    01/2021
//
// -----------------------------------------------------------------------------


// The Interface part is mostly used to declare extra fields.
Interface {
  Parameters {
    /* Start of import data parameters */
    Field segmentationOption {
      type   = Enum
      value  = New
      values = New,Preprocessed
    }
    
    Field dataPath {
      type  = String
      value = ImportModule.fullPath
    }
    
    // SegmentationPath is the path to trachea segmentation folder. It also updates the lungPath in Python
    Field SegmentationPath {
      type  = String
      value = SaveTrachea.sourceName
    }
    
    Field LungPath {
      type  = String
      value = SaveLungs.sourceName
    }
    
    Field TracheaPathFileName {
      type  = String
      value = ProcessedTrachea.name
    }
    
    Field LungPathFileName {
      type  = String
      value = ProcessedLungs.name
    }

    Field SamplingDICOM {
      type   = Enum
      value  = None
      values = Downsampling,None,Upsampling
    }
    Field xResample {
      type  = Int
      min   = 1
      value = 1
    } 
    Field yResample {
      type  = Int
      min   = 1
      value = 1
    }
    Field zResample {
      type  = Int
      min   = 1
      value = 1
    }
    /* End of import data parameters */
    
    /* Start of trachea parameters */
    Field CPRNumMarkers { type = Int }
    
    Field tracheaDiameter { 
      type  = Double 
      Value = PathToKeyFrame1.pathLength 
    }
    /* End of trachea parameters */
    
    Field validVolume {
      type  = Bool
      value = CalculateVolume.resultsValid
    }
    
    Field timepointVolumeCurrent {
      type  = Int
      value = CalculateVolume.userTimepointVolume
    }
    
    Field timepointVolumeMin {
      type  = Int
      value = CalculateVolume.minTimepointVolume
    }
    
    Field timepointVolumeMax {
      type  = Int
      value = CalculateVolume.maxTimepointVolume
    }
    
    
    
    
    // This is the current counter field in the MeVisLab network that is linked to modules that work with timepoints
    Field timepointCurrent {
      type  = Int
      value = 0
      min   = 0
      max   = 9
    }
    
    Field timepointMin {
      type  = Int
      value = CalculateVolume.minTimepoint
    }
    
    Field timepointMax {
      type  = Int
      value = CalculateVolume.maxTimepoint
    }
    
    Field timepointAutoStep {
      type  = Bool
      value = TimepointCounter.autoStep
    }
    
    Field timepointAutoStepInterval {
      type  = Double
      value = TimepointCounter.autoStepInterval_s
    }
    
    Field timepointStepDirection {
      type   = Enum
      value  = Up
      values = Up,Down
    }
  }
}

///////////////////////////////////////

// Commands section is used to declare and import Python scripts and assign functions.
Commands {

  // Indicate the source Python file
  source = $(LOCAL)/main.py
  
  // Set Fields used in control panels on opening of GUI
  initCommand = initialize

  FieldListener {
    command     = "py: updateField('dataPath', 'ImportModule.fullPath')"
    listenField = ImportModule.fullPath
  }
  
  FieldListener {
    command     = "py: updateField('SegmentationPath', 'SaveTrachea.sourceName')"
    listenField = SaveTrachea.sourceName
  }
  
  FieldListener {
    command     = "py: updateField('SegmentationPath', 'SaveLungs.sourceName')"
    listenField = SaveLungs.sourceName
  }
  
  FieldListener {
    command     = "py: updateField('TracheaPathFileName', 'ProcessedTrachea.name')"
    listenField = ProcessedTrachea.name
  }
  
  FieldListener {
    command     = "py: updateField('LungPathFileName', 'ProcessedLungs.name')"
    listenField = ProcessedLungs.name
  }
  
  FieldListener {
    command     = toggleSampling
    listenField = SamplingDICOM
  }
  
  FieldListener {
    command     = toggleImportSwitches
    listenField = segmentationOption
  }
  
  FieldListener {
    command     = "py: updateResample('x')"
    listenField = xResample
  }
  FieldListener {
    command     = "py: updateResample('y')"
    listenField = yResample
  }
  FieldListener {
    command     = "py: updateResample('z')"
    listenField = zResample
  }
  
  
  // Update CPRNumMarkers Field
  FieldListener {
    command     = "py: updateField('CPRNumMarkers', 'SoView2DMarkerEditor.numItems')"
    listenField = SoView2DMarkerEditor.numItems
  }
  
  FieldListener {
    command     = "py: calculateDiameter()"
    listenField = PathToKeyFrame1.pathLength
  }
  
  
  
  FieldListener  {
    command     = "py: updateField('validVolume', 'CalculateVolume.resultsValid')"
    listenField = CalculateVolume.resultsValid
  }
  FieldListener  {
    command     = "py: updateField('timepointVolumeCurrent', 'CalculateVolume.userTimepointVolume')"
    listenField = CalculateVolume.userTimepointVolume
  }
  FieldListener  {
    command     = "py: updateField('timepointVolumeMin', 'CalculateVolume.minTimepointVolume')"
    listenField = CalculateVolume.minTimepointVolume
  }
  FieldListener  {
    command     = "py: updateField('timepointVolumeMax', 'CalculateVolume.maxTimepointVolume')"
    listenField = CalculateVolume.maxTimepointVolume
  }
  
  
  
  
  FieldListener  {
    command     = "py: updateField('timepointCurrent', 'TimepointCounter.currentValue')"
    listenField = TimepointCounter.currentValue
  }
  FieldListener  {
    command     = "py: updateField('timepointMin', 'CalculateVolume.minTimepoint')"
    listenField = CalculateVolume.minTimepoint
  }
  FieldListener  {
    command     = "py: updateField('timepointMax', 'CalculateVolume.maxTimepoint')"
    listenField = CalculateVolume.maxTimepoint
  }
  FieldListener  {
    command     = "py: updateField('timepointAutoStep', 'TimepointCounter.autoStep')"
    listenField = TimepointCounter.autoStep
  }
  FieldListener  {
    command     = "py: updateField('TimepointCounter.autoStep', 'timepointAutoStep')"
    listenField = timepointAutoStep
  }
  FieldListener  {
    command     = "py: updateField('timepointAutoStepInterval', 'TimepointCounter.autoStepInterval_s')"
    listenField = TimepointCounter.autoStepInterval_s
  }
  FieldListener  {
    command     = "py: updateField('TimepointCounter.autoStepInterval_s', 'timepointAutoStepInterval')"
    listenField = timepointAutoStepInterval
  }
  FieldListener  {
    command     = "py: updateField('timepointStepDirection', 'TimepointCounter.stepDirection')"
    listenField = TimepointCounter.stepDirection
  }
  FieldListener  {
    command     = "py: updateField('TimepointCounter.stepDirection', 'timepointStepDirection')"
    listenField = timepointStepDirection
  }
  
  
  
  
  
  
  
  
  
  // This FieldListener triggers the function `updateCounter` in `Assignment-2-3.py` when the currentValue field from TimepointCurrent changes.
  FieldListener {
    command     = updateSliderField
    listenField = TimepointCounter.currentValue
  }
  
  // With just the above, if you change the slider's position, the Counter module's value will not change.
  // If you want a bi-directional update, you need to add another FieldListener that updates the Counter's value using the updateCounter function.
  FieldListener {
    command     = updateCounter
    listenField = timepointCurrent
  }
  

}

///////////////////////////////////////

// Window definition! Here all the MDL code will go which dictates how UI elements look.
Window "MedVis Group4" {
  // A TabView lets us have multiple options or settings in a compact area
  TabView {
    TabViewItem "Import data" {
      Splitter {
        direction = vertical
        Splitter{
          direction = horizontal
          Box "Control Panel" {              
            expandX = MinimumExpanding
            expandY = MinimumExpanding
            alignY  = Top
            Label Instruction {
              title    = "Import DICOM data and segment trachea and lungs or import preprocessed images"
              textWrap = WordBreak
            }
              
            Panel {
              minimumHeight = 350
              minimumWidth  = 350
              style{colors{fg=white}}
              module = ImportModule
            }
              
            Box "Resampling Controls" {
              Horizontal { // it's easier to align a bundle of controls by wrapping them in an extra Horizontal
                Horizontal {
                  alignX = Left
                  Label {title = "resampling mode: " labelAlignGroup = segmentationlabel}
                  Field SamplingDICOM {title = "" alignGroupX = segmentationbutton}
                  
                  Label {
                    title     = "<p style=\"color:tomato\"> Downsampling may lead to incorrect segmentations</p>"
                    visibleOn = "* SamplingDICOM == /^(Downsampling)$/ *"
                  }
                }
                Horizontal {
                  alignX         = Right
                  preferredWidth = 10
                  Label label { title = "Resampling Factor:" }
                  Label x {title = "x"}
                  NumberEdit xResample { step = 1 }
                  Label y {title = "y"}
                  NumberEdit yResample { step = 1 }
                  Label z {title = "z"}
                  NumberEdit zResample { step = 1 }
                }
              }
            }
              
            Box "Segmentation Controls" {
              minimumHeight = 120
              Horizontal {
                Horizontal {
                  alignX = Left
                  Label {title = "Segmentation mode: " labelAlignGroup = segmentationlabel }
                  Field segmentationOption {title = "" alignGroupX = segmentationbutton }
                }  
                Button  {
                  title     = "Start Segmentation"
                  command   = "py: StartSegmentation(\"segmentation\")"
                  visibleOn = "* segmentationOption == /^(New)$/ *"
                  //alignGroupX = segmentationbuttonsnew
                  alignX    = right
                } 
              }
              Horizontal {
                visibleOn = "* segmentationOption == /^(New)$/ *"
                Label { title = "Output Folder: " labelAlignGroup = segmentationlabel }
                Field SegmentationPath { title = "" expandX = Yes }
                Button {
                  title       = "Browse..."
                  command     = "py: Browse(\"SaveTrachea.sourceName\")"
                  alignGroupX = segmentationbuttonsnew
                  alignX      = Right
                }
              }
              Horizontal {
                visibleOn = "* segmentationOption == /^(New)$/ *"
                Button {
                  title       = "Store Results"
                  command     = "py: saveSegmentation()"
                  alignGroupX = segmentationbuttonsnew
                  alignX      = Right
                }
              }
                  
                
              Horizontal {
                visibleOn = "* segmentationOption == /^(Preprocessed)$/ *"
                Label {title = "Trachea segmentation: " labelAlignGroup = segmentationlabel}
                Field TracheaPathFileName { title = "" }
                Button {
                  title          = "Load File"
                  preferredWidth = 50
                  alignX         = Right
                  command        = "py: BrowseFile(\"ProcessedTrachea\")"
                }
              }
              Horizontal {
                visibleOn = "* segmentationOption == /^(Preprocessed)$/ *"
                Label {title = "Lungs segmentation: " labelAlignGroup = segmentationlabel}
                Field LungPathFileName { title = "" alignGroupX = segmentationPath}
                Button {
                  title          = "Load File"
                  preferredWidth = 50
                  alignX         = Right
                  command        = "py: BrowseFile(\"ProcessedLungs\")"
                }
              }    
            } // close segmentation control box
          } // close control panel box
        }
        // Start of 2nd row on import data tab
        Splitter {
          Box "DICOM Preview" {
            minimumHeight = 250
            minimumWidth  = 250
            expandX       = MinimumExpanding
            expandY       = MinimumExpanding
            Viewer DataPreview.self { type = SoRenderArea }
          }
          
          Box "Trachea Segmentation Preview" {
            minimumHeight = 250
            minimumWidth  = 250
            expandX       = MinimumExpanding
            expandY       = MinimumExpanding
            Viewer trachea.self {
              visibleOn = validVolume
              name      = "Trachea"
            }
            Label {title = "<p style=\"color:tomato\"> Start a new segmentation or load preprocessed image</p>"
              visibleOn = !validVolume textAlignment = Center textWrap = WordBreak }
          } // close Trachea segmentation box
          
          Box "Lungs Segmentation Preview" {
            minimumHeight = 250
            minimumWidth  = 250
            expandX       = MinimumExpanding
            expandY       = MinimumExpanding
            
            Viewer lungs.self {
              visibleOn = validVolume
              name      = "Lungs"
            }
            Label {title = "<p style=\"color:tomato\"> Start a new segmentation or load preprocessed image</p>"
              visibleOn = !validVolume textAlignment = Center textWrap = WordBreak }
          } // close Trachea segmentation box
        } // close splitter (2nd row)
      } // close outer splitter
    } // Close TabView of Import
    
    
    ////////////////////////////// Diagnosis related to trachea //////////////////////////////
    TabViewItem "Trachea new" {
      Splitter {
        direction = vertical
        Splitter {
          
        } // splitter row 1
        Splitter {} // splitter row 2
      }
    }
    
    
    TabViewItem "Trachea" {  
      Vertical {     
        // CPR and Diameter calculation
        Horizontal{
          Box "Control Panel"{
            preferredHeight = 450
            preferredWidth  = 400
                
            Vertical{
              Box "Settings Diameter" {
                Label {
                  Title = "Delete All Markers:"
                }
                Button { title = "Delete"    command = "py: Delete('SoView2DMarkerEditor.deleteAll') " }
                Horizontal {
                  Label { Title = "Calculated diameter: " }
                  Label { titleField = tracheaDiameter} 
                  Label { title = mm }
                }
              }
              Box "Settings Volume" { 
                Vertical{ expandx = No
                  // Settings volume difference trachea
                  Label {
                    title = "Determine two timepoints" 
                  }
                  //Maximal inspiration 
                  Label {
                    Title = "Maximal Inspiration"
                  }
                  NumberEdit Tin { step = 1 }
                      
                  Horizontal{
                    Button { title = "Delete Seeding Points Inspiration"    command = "py: Delete('RGIn.removeAll') " }
                    Button { title = "Update Region Growing Inspiration"    command = "py: RegionGrowing('RGIn.update') "}  
                  }
                      
                  //Maximal Expiration
                  Label { 
                    Title = "Maximal Expiration"
                  } 
                  NumberEdit Tex { step = 1 }}

                Horizontal {
                  Button { title = "Delete Seeding Points Expiration"    command = "py: Delete('RGEx.removeAll') " }
                  Button { title = "Update Region Growing Expiration"    command = "py: RegionGrowing('RGEx.update') "}
                }
              }
            }
          }
          Box "Diameter Trachea" {
            preferredHeight = 450
            preferredWidth  = 800
                
            Horizontal{
              Box "View 2D MPR" {
                Viewer View2D2.self {
                  name            = "ViewerMPR"    
                  viewing         = No
                  clone           = NO
                  preferredWidth  = 350
                  preferredHeight = 350
                }
              }
             
              Box "View CPR" {
                Label {title = "<p style=\"color:red\"> Please pick at least 2 markers to create a path</p>"
                  visibleOn = "* CPRNumMarkers == /^(0|1)$/ *" textAlignment = Center }
                
                Viewer Curved.self {
                  visibleOn       = "* CPRNumMarkers != /^(0|1)$/ *"
                  name            = "Viewer2DMPR"    
                  clone           = NO
                  preferredWidth  = 350
                  preferredHeight = 350
                }
              }
            }
          }
        }
        // Volume Difference between max inspiration and max expiration
        Box "Volume Trachea" {
          preferredHeight = 450
          preferredWidth  = 1500
              
          Horizontal{
            Box "Max Inspiration" {
              Viewer RGIn.viewerSelf {
                name            = "RegionGrowingIn"  
                viewing         = No
                clone           = NO
                preferredWidth  = 350
                preferredHeight = 350   
              }
                
            }
            Box "Max expiration" {
              Viewer RGEx.viewerSelf {
                name            = "RegionGrowingEx"  
                viewing         = No
                clone           = NO
                preferredWidth  = 350
                preferredHeight = 350   
              }
            }
            // Output Trachea Inspiration volume + expiration volume            
            Box "View 3D MPR" {
              Viewer VolumeDiff.self {
                name            = "Viewer3DMPR"    
                clone           = NO
                preferredWidth  = 350
                preferredHeight = 350    
              }
            }
          }
        }
      }
    }
    
    
    ////////////////////////////// Diagnoses related to lungs //////////////////////////////
    TabViewItem "Lung" {
      tabSelectedCommand = "py: ReloadModule('SubtractionImage')"
      Splitter {
        direction = vertical
        Splitter {
          Box "Control Panel" {
            alignY = Top
            //       minimumHeight = 350
           maximumWidth = 350

            Box " Lung Volume" {
              expandX = Minimum
              Horizontal {
                Label { title = "Min. Timepoint: " labelAlignGroup = lungVolumeTime}
                Label {titleField = timepointMin expandX = Yes}
                Label {title = "Volume:" labelAlignGroup = lungVolume }
                Label {titleField = timepointVolumeMin }
                Label {title = ml }
              }
              Horizontal {
                Label { title = "Max. Timepoint: " labelAlignGroup = lungVolumeTime}
                Label {titleField = timepointMax expandX = Yes}
                Label {title = "Volume:" labelAlignGroup = lungVolume }
                Label {titleField = timepointVolumeMax }
                Label {title = ml }
              }
              Horizontal {
                Label { title = "User Timepoint: " labelAlignGroup = lungVolumeTime}
                Label {titleField = timepointCurrent expandX = Yes }
                Label {title = "Volume:" labelAlignGroup = lungVolume }
                Label {titleField = timepointVolumeCurrent }
                Label {title = ml }
              }
            }
            
            Box "Timepoint Control" {
              expandX = Minimum
              Horizontal {
                Slider timepointCurrent {
                  pageStep  = 1  // Step-size when user clicks left or right
                  snap      = 1    // Snap to multiples of 1
                  direction = Horizontal
                }
                Label {titleField = timepointCurrent}
              }
              
              Horizontal {
                CheckBox timepointAutoStep {title = "Auto-update every"}
                Field timepointAutoStepInterval {title = "" step = 0.1} 
                Label {title = seconds}
              }
              Horizontal {              
                Label {title = "Step Direction: "}
                Field timepointStepDirection {title = ""}
              }
            }
          }
          
          Panel {
            module        = CurveInspector
            maximumWidth = 500
            maximumHeight = 500
            //minimumHeight = 350
            //minimumWidth  = 350
            //expandX       = MinimumExpanding
            //expandY       = MinimumExpanding
          }
        } // splitter row 1
        Splitter {
          Panel {module = substraction_images window = LutEditor}
          Viewer substraction_overlayed.self { type = SoCustomExaminerViewer}
        } // splitter row 2
      } // close vertical splitter
    } // close Lung tabview
  } // close tabviewer
} // close MyViewer window
