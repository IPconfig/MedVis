// -----------------------------------------------------------------------------
// All MeVisLab modules are essentially defined using MDL. It consists of the Interface, Commands and Window components.
//
// \file    main.py
// \author  MedVis group 4
// \date    01/2021
//
// -----------------------------------------------------------------------------


// The Interface part is mostly used to declare extra fields.
// Imagine if your interface calculated the volume of a tumor and you wanted to store this value.
// You would need to create a Field, as shown below.
Interface {
  Parameters {
    /* Start of Import parameters */
    Field segmentationOption {
      type   = Enum
      value  = New
      values = New,Preprocessed
    }
    
    Field dataPath {
      type  = String
      value = ImportModule.fullPath
    }
    
    // SegmentationPath is the path to trachea segmentation folder. It also updates the lungPath in Python
    Field SegmentationPath {
      type  = String
      value = SaveTrachea.sourceName
    }
    
    Field LungPath {
      type  = String
      value = SaveLungs.sourceName
    }
    
    Field TracheaPathFileName {
      type = String
      value = ProcessedTrachea.name
    }
    
    Field LungPathFileName {
      type = String
      value = ProcessedLungs.name
    }

    Field SamplingDICOM {
      type   = Enum
      value  = None
      values = Downsampling,None,Upsampling
    }
    Field xResample {
      type  = Int
      min   = 1
      value = 1
    } 
    Field yResample {
      type  = Int
      min   = 1
      value = 1
    }
    Field zResample {
      type  = Int
      min   = 1
      value = 1
    }
    /* End of Import parameters */
    
    
    Field timePointVolume {
      type  = Int
      value = CalculateVolume.userTimepointVolume
    }
    
    Field validVolume {
      type  = Bool
      value = CalculateVolume.resultsValid
    }
    
    // Define an integer field on [0, 9], starting on 5.
    Field TimepointCurrent {
      type  = Int
      value = 0
      min   = 0
      max   = 9
    }
    
    
    Field MyLineTextField {
      type  = string
      value = "This is MyLineTextField. Any LineEdit bound to this Field stays in sync"
    }
  }
}

///////////////////////////////////////

// Secondly, there is the Commands section. It is used to declare and import Python scripts and assign functions.
// For instance, a Button may require a certain function to trigger, but MeVisLab will need to know where the source definitions are located.
Commands {

  // Indicate the source Python file
  source = $(LOCAL)/main.py
  
  // Set Fields used in control panels on opening of GUI
  initCommand = initialize

  FieldListener {
    command     = "py: updateField('dataPath', 'ImportModule.fullPath')"
    listenField = ImportModule.fullPath
  }
  
  FieldListener {
    command     = "py: updateField('SegmentationPath', 'SaveTrachea.sourceName')"
    listenField = SaveTrachea.sourceName
  }
  
  FieldListener {
    command     = "py: updateField('SegmentationPath', 'SaveLungs.sourceName')"
    listenField = SaveLungs.sourceName
  }
  
  FieldListener {
    command     = "py: updateField('TracheaPathFileName', 'ProcessedTrachea.name')"
    listenField = ProcessedTrachea.name
  }
  
  FieldListener {
    command     = "py: updateField('LungPathFileName', 'ProcessedLungs.name')"
    listenField = ProcessedLungs.name
  }
  
  FieldListener {
    command     = toggleSampling
    listenField = SamplingDICOM
  }
  
  FieldListener {
    command     = toggleImportSwitches
    listenField = segmentationOption
  }
  
  FieldListener {
    command     = "py: updateResample(\"x\")"
    listenField = xResample
  }
  FieldListener {
    command     = "py: updateResample(\"y\")"
    listenField = yResample
  }
  FieldListener {
    command     = "py: updateResample(\"z\")"
    listenField = zResample
  }
  
  FieldListener  {
    command     = "py: updateField('timePointVolume', 'CalculateVolume.userTimepointVolume')"
    listenField = CalculateVolume.userTimepointVolume
  }
  
  FieldListener  {
    command     = "py: updateField('validVolume', 'CalculateVolume.resultsValid')"
    listenField = CalculateVolume.resultsValid
  }
  
  
  // This FieldListener triggers the function `updateCounter` in `Assignment-2-3.py` when the currentValue field from TimepointCurrent changes.
  FieldListener {
    command     = updateSliderField
    listenField = TimepointCounter.currentValue
  }
  
  // With just the above, if you change the slider's position, the Counter module's value will not change.
  // If you want a bi-directional update, you need to add another FieldListener that updates the Counter's value using the updateCounter function.
  FieldListener {
    command     = updateCounter
    listenField = TimepointCurrent
  }
  

}

///////////////////////////////////////

// Window definition! Here all the MDL code will go which dictates how UI elements look.
Window MyViewer {
  // A TabView lets us have multiple options or settings in a compact area
  TabView {
    TabViewItem "Import data" {
      Splitter {
        direction = vertical
        Splitter{
          direction = horizontal
          Box "Control Panel" {              
            expandX = MinimumExpanding
            expandY = MinimumExpanding
            alignY  = Top
            Label Instruction {
              title    = "Import DICOM data and segment trachea and lungs or import preprocessed images"
              textWrap = WordBreak
            }
              
            Panel {
              minimumHeight = 350
              minimumWidth  = 350
              style{colors{fg=white}}
              module = ImportModule
            }
              
            Box "Resampling Controls" {
              Horizontal { // it's easier to align a bundle of controls by wrapping them in a Horizontal
                Horizontal {
                  alignX = Left
                  Label {title = "resampling mode: " labelAlignGroup = segmentationlabel}
                  Field SamplingDICOM {title = "" alignGroupX = segmentationbutton}
                }
                Horizontal {
                  alignX         = Right
                  preferredWidth = 10
                  Label label { title = "Resampling Factor:" }
                  Label x {title = "x"}
                  NumberEdit xResample { step = 1 }
                  Label y {title = "y"}
                  NumberEdit yResample { step = 1 }
                  Label z {title = "z"}
                  NumberEdit zResample { step = 1 }
                }
              }
            }
              
            Box "Segmentation controls" {
              minimumHeight = 120
              Horizontal {
                Horizontal {
                  alignX = Left
                  Label {title = "Segmentation mode: " labelAlignGroup = segmentationlabel }
                  Field segmentationOption {title = "" alignGroupX = segmentationbutton }
                }  
                Button  {
                  title     = "Start Segmentation"
                  command   = "py: ReloadModule(\"segmentation\")"
                  visibleOn = "* segmentationOption == /^(New)$/ *"
                  //alignGroupX = segmentationbuttonsnew
                  alignX    = right
                } 
              }
              Horizontal {
                visibleOn = "* segmentationOption == /^(New)$/ *"
                Label { title = "Output Folder: " labelAlignGroup = segmentationlabel }
                Field SegmentationPath { title = "" expandX = Yes }
                Button {
                  title          = "Browse..."
                  command        = "py: Browse(\"SaveTrachea.sourceName\")"
                  alignGroupX = segmentationbuttonsnew
                  alignX         = Right
                }
              }
              Horizontal {
                visibleOn = "* segmentationOption == /^(New)$/ *"
                Button {
                  title   = "Store Results"
                  command = "py: saveSegmentation()"
                  alignGroupX = segmentationbuttonsnew
                  alignX  = Right
                }
              }
                  
                
                Horizontal {
                  visibleOn = "* segmentationOption == /^(Preprocessed)$/ *"
                  Label {title = "Trachea segmentation: " labelAlignGroup = segmentationlabel}
                  Field TracheaPathFileName { title = "" }
                  Button {
                    title          = "Load File"
                    preferredWidth = 50
                    alignX         = Right
                    command        = "py: BrowseFile(\"ProcessedTrachea\")"
                  }
                }
                Horizontal {
                  visibleOn = "* segmentationOption == /^(Preprocessed)$/ *"
                  Label {title = "Lungs segmentation: " labelAlignGroup = segmentationlabel}
                  Field LungPathFileName { title = "" alignGroupX = segmentationPath}
                  Button {
                    title          = "Load File"
                    preferredWidth = 50
                    alignX         = Right
                    command        = "py: BrowseFile(\"ProcessedLungs\")"
                  }
                }    
            } // close segmentation control box
          } // close control panel box
        }
        // Start of 2nd row on import data tab
        Splitter {
          Box "DICOM Preview" {
            minimumHeight = 250
            minimumWidth  = 250
            expandX       = MinimumExpanding
            expandY       = MinimumExpanding
            Viewer DataPreview.self { type = SoRenderArea }
          }
          
          Box "Trachea Segmentation Preview" {
            minimumHeight = 250
            minimumWidth  = 250
            expandX       = MinimumExpanding
            expandY       = MinimumExpanding
            Viewer trachea.self {
              visibleOn = validVolume
              name      = "Trachea"
            }
            Label {title = "<p style=\"color:tomato\"> Start a new segmentation or load preprocessed image</p>"
              visibleOn = !validVolume textAlignment = Center textWrap = WordBreak }
          } // close Trachea segmentation box
          
          Box "Lungs Segmentation Preview" {
            minimumHeight = 250
            minimumWidth  = 250
            expandX       = MinimumExpanding
            expandY       = MinimumExpanding
            
            Viewer lungs.self {
              visibleOn = validVolume
              name      = "Lungs"
            }
            Label {title = "<p style=\"color:tomato\"> Start a new segmentation or load preprocessed image</p>"
              visibleOn = !validVolume textAlignment = Center textWrap = WordBreak }
          } // close Trachea segmentation box
        } // close splitter (2nd row)
      } // close outer splitter
    } // Close TabView of Import
    
    
    ////////////////////////////// Diagnosis related to trachea //////////////////////////////
    TabViewItem "Trachea Diameter" {
      Splitter {
        direction = vertical
        Splitter {
          
        } // splitter row 1
        Splitter {} // splitter row 2
      }
    }
    
    /* Diagnoses related to lungs */
    TabViewItem "Lung" {
      Splitter {
        direction = vertical
        Splitter {
          Panel {
            module        = CurveInspector
            minimumHeight = 350
            minimumWidth  = 350
            expandX       = MinimumExpanding
            expandY       = MinimumExpanding
          }
        } // splitter row 1
        Splitter {} // splitter row 2
      }
    }

  } // close tabviewer
} // close MyViewer window



